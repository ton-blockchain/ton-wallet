{"version":3,"file":"897.b0aa8daaa0f11c289b24.js","mappings":"sUAOA,MAAMA,GAAqB,QAAe,qBAAsB,CAC5DC,IAAK,IAAM,+BAAgBC,MAAKC,GAAK,IAAIA,EAAEC,0BAEzCC,EAAqB,CACvB,YACA,oHACA,kBACA,wCAEGC,eAAeC,IAElB,aADuBP,EAAmBQ,iBAAiBC,QAC5CC,QAAQC,GAAMA,EAAEC,WAAa,MAChD,CACA,MAAMC,EAA0B,IAAIC,EAAA,EACpCd,EAAmBe,YAAY,mBAAoBC,IAC/C,GAAIA,EAAOJ,WAAa,KACpB,OACJ,MAAMK,GAAc,QAAqBD,EAAOE,WAChDL,EAAwBM,KAAK,CACzBC,KAAM,MACNC,WAAYL,EACZC,eACF,IAENjB,EAAmBe,YAAY,sBAAuBC,IAClD,GAAIA,EAAOJ,WAAa,KACpB,OACJ,MAAMK,GAAc,QAAqBD,EAAOE,WAChDL,EAAwBM,KAAK,CACzBC,KAAM,SACNC,WAAYL,EACZC,eACF,IAEN,MAAMK,EAAmBT,EAQlB,MAAMU,UAAqBC,EAAA,GAC9B,WAAAC,CAAYC,EAAUR,GAClBS,QACAC,KAAKF,SAAWA,EAChBE,KAAKX,aAAc,QAAqBC,EAC5C,CAKA,iBAAaW,GACT,OAAKD,KAAKE,YAEHvB,IADIwB,QAAQC,QAAQ,GAE/B,CAIA,aAAOC,CAAOC,GACV,OAAKN,KAAKE,YCjEX,WAEH,IADA,IAAIK,EAAO,GACFC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,GAAMC,UAAUD,GAEzB,OCNO,EAAAG,EAAA,GAAS,EDMTC,EAAY,EAAAC,EAAA,GAAKN,GAAM,QAAaA,IAC/C,CD8DeO,EAAO,EAAAD,EAAA,GAAKlC,KAAqBoC,MAAK,EAAAC,EAAA,IAAUnC,IAAY,EAAAgC,EAAA,GAAKhC,EAAQoC,KAAK7B,IAAW,CAC5FI,KAAM,MACNC,WAAYL,EACZC,aAAa,QAAqBD,EAAOE,mBACrCI,GAAkBwB,UAAUZ,GANzB,CAAC,CAOhB,CAIA,iBAAaa,CAAKC,GACd,IAEI,UADqBhD,EAAmBiD,WAAW,CAAEvB,SAAUsB,EAAUE,MAC9DC,QACP,OAAO,IAAI5B,EAAayB,EAAUE,GAAIF,EAAU9B,WAGhD,MAAM,IAAIkC,KAElB,CACA,MAAOC,GACH,GAAIhD,EAAmBiD,SAASD,EAAME,SAClC,MAAM,IAAI,EAAAC,mBAAmBH,EAAME,SAEvC,MAAMF,CACV,CACJ,CAKA,cAAMI,CAASC,GACX,OAAO9B,KAAK+B,oBAAmBrD,UAC3B,IACI,MAAMsD,EAAUF,EAAKG,SAAS,QAC9B,IAAAC,KAAI,OAAQ,MAAMF,KAClB,MAAMG,QAAe/D,EAAmByD,SAAS,CAAE/B,SAAUE,KAAKF,SAAUkC,YACtEI,EAAYC,EAAOxB,KAAKsB,EAAOG,SAAU,OAE/C,OADA,IAAAJ,KAAI,OAAQ,MAAME,KACXA,CACX,CACA,MAAOX,GACH,GAAIhD,EAAmBiD,SAASD,EAAME,SAElC,MADA3B,KAAKuC,KAAK,aAAcd,GAClB,IAAI,EAAAe,kCAAkCf,EAAME,SAEtD,MAAMF,CACV,IAER,CAKA,WAAMgB,SACIzC,KAAK0C,oBACNtE,EAAmBuE,YAAY,CAAE7C,SAAUE,KAAKF,UACzD,EAKJH,EAAaO,YAAc,IAAMC,QAAQC,SAAQ,E","sources":["webpack://mytonwallet/./node_modules/@mytonwallet/capacitor-usb-hid/dist/esm/index.js","webpack://mytonwallet/./node_modules/rxjs/dist/esm5/internal/observable/concat.js","webpack://mytonwallet/./node_modules/rxjs/dist/esm5/internal/operators/concatAll.js"],"sourcesContent":["import { registerPlugin } from '@capacitor/core';\nimport { identifyUSBProductId, ledgerUSBVendorId } from '@ledgerhq/devices';\nimport { DisconnectedDevice, DisconnectedDeviceDuringOperation } from '@ledgerhq/errors';\nimport Transport from '@ledgerhq/hw-transport';\nimport { log } from '@ledgerhq/logs';\nimport { concat, from, Subject } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nconst CapacitorUSBPlugin = registerPlugin('CapacitorUSBPlugin', {\n    web: () => import('./web').then(m => new m.CapacitorUSBPluginWeb()),\n});\nconst disconnectedErrors = [\n    'I/O error',\n    \"Attempt to invoke virtual method 'int android.hardware.usb.UsbDevice.getDeviceClass()' on a null object reference\",\n    'Invalid channel',\n    'Permission denied by user for device',\n];\nexport async function listLedgerDevices() {\n    const devices = (await CapacitorUSBPlugin.getDeviceList()).devices;\n    return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n}\nconst liveDeviceEventsSubject = new Subject();\nCapacitorUSBPlugin.addListener('onDeviceConnect', (device) => {\n    if (device.vendorId !== ledgerUSBVendorId)\n        return;\n    const deviceModel = identifyUSBProductId(device.productId);\n    liveDeviceEventsSubject.next({\n        type: 'add',\n        descriptor: device,\n        deviceModel,\n    });\n});\nCapacitorUSBPlugin.addListener('onDeviceDisconnect', (device) => {\n    if (device.vendorId !== ledgerUSBVendorId)\n        return;\n    const deviceModel = identifyUSBProductId(device.productId);\n    liveDeviceEventsSubject.next({\n        type: 'remove',\n        descriptor: device,\n        deviceModel,\n    });\n});\nconst liveDeviceEvents = liveDeviceEventsSubject;\n/**\n * Ledger's React Native HID Transport implementation\n * @example\n * import TransportHID from \"@ledgerhq/react-native-hid\";\n * ...\n * TransportHID.create().then(transport => ...)\n */\nexport class HIDTransport extends Transport {\n    constructor(deviceId, productId) {\n        super();\n        this.deviceId = deviceId;\n        this.deviceModel = identifyUSBProductId(productId);\n    }\n    /**\n     * List currently connected devices.\n     * @returns Promise of devices\n     */\n    static async list() {\n        if (!this.isSupported)\n            return Promise.resolve([]);\n        return listLedgerDevices();\n    }\n    /**\n     * Listen to ledger devices events\n     */\n    static listen(observer) {\n        if (!this.isSupported) {\n            return {};\n        }\n        return concat(from(listLedgerDevices()).pipe(mergeMap((devices) => from(devices.map((device) => ({\n            type: 'add',\n            descriptor: device,\n            deviceModel: identifyUSBProductId(device.productId),\n        }))))), liveDeviceEvents).subscribe(observer);\n    }\n    /**\n     * Open a the transport with a Ledger device\n     */\n    static async open(deviceObj) {\n        try {\n            const result = await CapacitorUSBPlugin.openDevice({ deviceId: deviceObj.id });\n            if (result.success) {\n                return new HIDTransport(deviceObj.id, deviceObj.productId);\n            }\n            else {\n                throw new Error();\n            }\n        }\n        catch (error) {\n            if (disconnectedErrors.includes(error.message)) {\n                throw new DisconnectedDevice(error.message);\n            }\n            throw error;\n        }\n    }\n    /**\n     * @param {*} apdu input value\n     * @returns Promise of apdu response\n     */\n    async exchange(apdu) {\n        return this.exchangeAtomicImpl(async () => {\n            try {\n                const apduHex = apdu.toString('hex');\n                log('apdu', `=> ${apduHex}`);\n                const result = await CapacitorUSBPlugin.exchange({ deviceId: this.deviceId, apduHex });\n                const resultHex = Buffer.from(result.response, 'hex');\n                log('apdu', `<= ${resultHex}`);\n                return resultHex;\n            }\n            catch (error) {\n                if (disconnectedErrors.includes(error.message)) {\n                    this.emit('disconnect', error);\n                    throw new DisconnectedDeviceDuringOperation(error.message);\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Close the transport\n     * @returns Promise\n     */\n    async close() {\n        await this.exchangeBusyPromise;\n        void CapacitorUSBPlugin.closeDevice({ deviceId: this.deviceId });\n    }\n}\n/**\n * Check if the transport is supported (basically true on Android)\n */\nHIDTransport.isSupported = () => Promise.resolve(true);\nexport * from './definitions';\nexport { CapacitorUSBPlugin };\n//# sourceMappingURL=index.js.map","import { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function concat() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return concatAll()(from(args, popScheduler(args)));\n}\n//# sourceMappingURL=concat.js.map","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map"],"names":["CapacitorUSBPlugin","web","then","m","CapacitorUSBPluginWeb","disconnectedErrors","async","listLedgerDevices","getDeviceList","devices","filter","d","vendorId","liveDeviceEventsSubject","Subject","addListener","device","deviceModel","productId","next","type","descriptor","liveDeviceEvents","HIDTransport","Transport","constructor","deviceId","super","this","list","isSupported","Promise","resolve","listen","observer","args","_i","arguments","length","mergeAll","concatAll","from","concat","pipe","mergeMap","map","subscribe","open","deviceObj","openDevice","id","success","Error","error","includes","message","DisconnectedDevice","exchange","apdu","exchangeAtomicImpl","apduHex","toString","log","result","resultHex","Buffer","response","emit","DisconnectedDeviceDuringOperation","close","exchangeBusyPromise","closeDevice"],"sourceRoot":""}