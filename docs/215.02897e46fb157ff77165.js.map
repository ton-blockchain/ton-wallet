{"version":3,"file":"215.02897e46fb157ff77165.js","mappings":"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","sources":["webpack://mytonwallet/./node_modules/@capacitor-mlkit/barcode-scanning/dist/esm/web.js"],"sourcesContent":["import { CapacitorException, ExceptionCode, WebPlugin } from '@capacitor/core';\nimport { BarcodeValueType, LensFacing } from './definitions';\nexport class BarcodeScannerWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this._isSupported = 'BarcodeDetector' in window;\n        this.errorVideoElementMissing = 'videoElement must be provided.';\n        this.eventBarcodesScanned = 'barcodesScanned';\n    }\n    async startScan(options) {\n        if (!this._isSupported) {\n            throw this.createUnavailableException();\n        }\n        if (!(options === null || options === void 0 ? void 0 : options.videoElement)) {\n            throw new Error(this.errorVideoElementMissing);\n        }\n        this.videoElement = options.videoElement;\n        this.stream = await navigator.mediaDevices.getUserMedia({\n            video: {\n                facingMode: {\n                    ideal: (options === null || options === void 0 ? void 0 : options.lensFacing) === LensFacing.Front ? 'user' : 'environment',\n                },\n            },\n            audio: false,\n        });\n        options.videoElement.srcObject = this.stream;\n        await options.videoElement.play();\n        const barcodeDetector = new BarcodeDetector();\n        this.intervalId = window.setInterval(async () => {\n            if (!options.videoElement) {\n                return;\n            }\n            const barcodes = await barcodeDetector.detect(options.videoElement);\n            if (barcodes.length === 0) {\n                return;\n            }\n            else {\n                this.handleScannedBarcodes(barcodes);\n            }\n        }, 500);\n    }\n    async stopScan() {\n        if (!this._isSupported) {\n            throw this.createUnavailableException();\n        }\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        }\n        if (this.stream) {\n            this.stream.getTracks().forEach(track => track.stop());\n            this.stream = undefined;\n        }\n        if (this.videoElement) {\n            this.videoElement.srcObject = null;\n            this.videoElement = undefined;\n        }\n    }\n    async readBarcodesFromImage(_options) {\n        throw this.createUnavailableException();\n    }\n    async scan() {\n        throw this.createUnavailableException();\n    }\n    async isSupported() {\n        return { supported: this._isSupported };\n    }\n    async enableTorch() {\n        throw this.createUnavailableException();\n    }\n    async disableTorch() {\n        throw this.createUnavailableException();\n    }\n    async toggleTorch() {\n        throw this.createUnavailableException();\n    }\n    async isTorchEnabled() {\n        throw this.createUnavailableException;\n    }\n    async isTorchAvailable() {\n        throw this.createUnavailableException();\n    }\n    async setZoomRatio(_options) {\n        throw this.createUnavailableException();\n    }\n    async getZoomRatio() {\n        throw this.createUnavailableException();\n    }\n    async getMinZoomRatio() {\n        throw this.createUnavailableException();\n    }\n    async getMaxZoomRatio() {\n        throw this.createUnavailableException();\n    }\n    async openSettings() {\n        throw this.createUnavailableException();\n    }\n    async isGoogleBarcodeScannerModuleAvailable() {\n        throw this.createUnavailableException();\n    }\n    async installGoogleBarcodeScannerModule() {\n        throw this.createUnavailableException();\n    }\n    async checkPermissions() {\n        try {\n            const result = await navigator.permissions.query({\n                name: 'camera',\n            });\n            return {\n                camera: result.state,\n            };\n        }\n        catch (error) {\n            return {\n                camera: 'prompt',\n            };\n        }\n    }\n    async requestPermissions() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n            stream.getTracks().forEach(track => track.stop());\n            return {\n                camera: 'granted',\n            };\n        }\n        catch (error) {\n            return {\n                camera: 'denied',\n            };\n        }\n    }\n    createUnavailableException() {\n        return new CapacitorException('This plugin method is not available on this platform.', ExceptionCode.Unavailable);\n    }\n    handleScannedBarcodes(barcodes) {\n        const result = {\n            barcodes: barcodes.map(barcode => ({\n                cornerPoints: [\n                    [barcode.cornerPoints[0].x, barcode.cornerPoints[0].y],\n                    [barcode.cornerPoints[1].x, barcode.cornerPoints[1].y],\n                    [barcode.cornerPoints[2].x, barcode.cornerPoints[2].y],\n                    [barcode.cornerPoints[3].x, barcode.cornerPoints[3].y],\n                ],\n                displayValue: barcode.rawValue,\n                rawValue: barcode.rawValue,\n                format: barcode.format.toUpperCase(),\n                valueType: BarcodeValueType.Unknown,\n            })),\n        };\n        this.notifyListeners(this.eventBarcodesScanned, result);\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["BarcodeScannerWeb","constructor","super","arguments","this","_isSupported","window","errorVideoElementMissing","eventBarcodesScanned","startScan","options","createUnavailableException","videoElement","Error","stream","navigator","mediaDevices","getUserMedia","video","facingMode","ideal","lensFacing","Front","audio","srcObject","play","barcodeDetector","BarcodeDetector","intervalId","setInterval","async","barcodes","detect","length","handleScannedBarcodes","stopScan","clearInterval","undefined","getTracks","forEach","track","stop","readBarcodesFromImage","_options","scan","isSupported","supported","enableTorch","disableTorch","toggleTorch","isTorchEnabled","isTorchAvailable","setZoomRatio","getZoomRatio","getMinZoomRatio","getMaxZoomRatio","openSettings","isGoogleBarcodeScannerModuleAvailable","installGoogleBarcodeScannerModule","checkPermissions","camera","permissions","query","name","state","error","requestPermissions","Unavailable","result","map","barcode","cornerPoints","x","y","displayValue","rawValue","format","toUpperCase","valueType","Unknown","notifyListeners"],"sourceRoot":""}