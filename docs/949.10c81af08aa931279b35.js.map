{"version":3,"file":"949.10c81af08aa931279b35.js","mappings":"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","sources":["webpack://mytonwallet/./src/util/cycleRestrict.ts","webpack://mytonwallet/./src/lib/rlottie/RLottie.ts"],"sourcesContent":["export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n","import { animate } from '../../util/animation';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport Deferred from '../../util/Deferred';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { IS_ANDROID, IS_IOS, IS_SAFARI } from '../../util/windowEnvironment';\nimport { requestMeasure, requestMutation } from '../fasterdom/fasterdom';\n\ninterface Params {\n  size: number;\n  shouldStretch?: boolean;\n  noLoop?: boolean;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\n\nconst workers = launchMediaWorkers().map(({ connector }) => connector);\nconst instancesByRenderId = new Map<string, RLottie>();\n\nconst PENDING_CANVAS_RESIZES = new WeakMap<HTMLCanvasElement, Promise<void>>();\n\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private views = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [\n      , canvas,\n      renderId,\n      params,\n      viewId = generateUniqueId(), ,\n      onLoad,\n    ] = args;\n    let instance = instancesByRenderId.get(renderId);\n\n    if (!instance) {\n      instance = new RLottie(...args);\n      instancesByRenderId.set(renderId, instance);\n    } else {\n      instance.addView(viewId, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    private tgsUrl: string,\n    private container: HTMLDivElement | HTMLCanvasElement,\n    private renderId: string,\n    private params: Params,\n    viewId: string = generateUniqueId(),\n    private customColor?: [number, number, number],\n    private onLoad?: NoneToVoidFunction | undefined,\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addView(viewId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeView(viewId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.views.get(viewId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.views.delete(viewId);\n\n    if (!this.views.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(viewId?: string) {\n    this.lastRenderAt = undefined;\n\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.views.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number], forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    const frameIndex = Math.round(this.approxFrameIndex);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    if (frameIndex !== stopFrameIndex || forceRestart) {\n      this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    }\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  async setSharedCanvasCoords(viewId: string, newCoords: Params['coords']) {\n    const containerInfo = this.views.get(viewId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    const isCanvasDirty = !canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false';\n\n    if (!isCanvasDirty) {\n      await PENDING_CANVAS_RESIZES.get(canvas);\n    }\n\n    let [canvasWidth, canvasHeight] = [canvas.width, canvas.height];\n\n    if (isCanvasDirty) {\n      const sizeFactor = this.calcSizeFactor();\n      ([canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor));\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      canvas.dataset.isJustCleaned = 'true';\n      requestMeasure(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvasWidth),\n      y: Math.round((newCoords?.y || 0) * canvasHeight),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords.x, containerInfo.coords.y);\n    }\n  }\n\n  private addView(\n    viewId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      const { size, shouldStretch } = this.params;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      requestMutation(() => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n\n        if (shouldStretch) {\n          canvas.style.width = '100%';\n        } else {\n          canvas.style.width = `${size}px`;\n          canvas.style.height = `${size}px`;\n        }\n\n        canvas.style.display = 'block';\n\n        canvas.width = imgSize;\n        canvas.height = imgSize;\n\n        container.appendChild(canvas);\n\n        this.views.set(viewId, {\n          canvas, ctx, onLoad,\n        });\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      imgSize = Math.round(this.params.size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      const [canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor);\n\n      this.views.set(viewId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round(coords!.x * canvasWidth),\n          y: Math.round(coords!.y * canvasHeight),\n        },\n        onLoad,\n      });\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      size,\n      isLowPriority,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(window.devicePixelRatio * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesByRenderId.delete(this.renderId);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    void workers[this.workerIndex].request({\n      name: 'rlottie:init',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    void workers[this.workerIndex].request({\n      name: 'rlottie:destroy',\n      args: [this.renderId],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    void workers[this.workerIndex].request({\n      name: 'rlottie:changeData',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.views.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.views.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = (this.direction * this.speed) / currentSpeed;\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    }, requestMutation);\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    void workers[this.workerIndex].request({\n      name: 'rlottie:renderFrames',\n      args: [this.renderId, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    const deferred = new Deferred<void>();\n    PENDING_CANVAS_RESIZES.set(canvas, deferred.promise);\n    requestMutation(() => {\n      canvas.width = expectedWidth;\n      canvas.height = expectedHeight;\n      deferred.resolve();\n    });\n  }\n\n  return [expectedWidth, expectedHeight];\n}\n\nexport default RLottie;\n"],"names":["cycleRestrict","length","index","Math","floor","WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","workers","launchMediaWorkers","map","_ref","connector","instancesByRenderId","Map","PENDING_CANVAS_RESIZES","WeakMap","lastWorkerIndex","RLottie","views","msPerFrame","reduceFactor","frames","isAnimating","isWaiting","isEnded","isDestroyed","isRendererInited","approxFrameIndex","prevFrameIndex","stopFrameIndex","speed","direction","init","_len","arguments","args","Array","_key","canvas","renderId","params","viewId","generateUniqueId","onLoad","instance","get","addView","coords","set","constructor","tgsUrl","container","undefined","customColor","onEnded","onLoop","this","initConfig","initRenderer","removeView","ctx","isSharedCanvas","clearRect","x","y","imgSize","remove","delete","size","destroy","isPlaying","play","forceRestart","isPaused","doPlay","pause","lastRenderAt","from","values","every","_ref2","isLowPriority","frame","i","close","playSegment","_ref3","startFrameIndex","frameIndex","round","setSpeed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","isCanvasDirty","dataset","isJustCleaned","canvasWidth","canvasHeight","width","height","sizeFactor","calcSizeFactor","ensureCanvasSize","requestMeasure","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","Error","shouldStretch","imageData","ImageData","requestMutation","document","createElement","getContext","style","display","appendChild","isConnected","quality","max","window","devicePixelRatio","clearCache","destroyRenderer","forEach","cacheModulo","setColor","newColor","workerIndex","MAX_WORKERS","request","name","onRendererInit","bind","framesCount","changeData","onChangeData","animate","_ref4","isLoaded","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","expectedNextFrameIndex","_this$onLoop","_this$onEnded","call","_this$onLoop2","_this$onEnded2","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","offsetWidth","expectedHeight","offsetHeight","deferred","Deferred","promise","resolve"],"sourceRoot":""}