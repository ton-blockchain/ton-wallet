{"version":3,"file":"956.1c3822f193a3d67e6aa6.js","mappings":"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","sources":["webpack://mytonwallet/./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            var _a, _b;\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!options.progress)\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const result = await this.writeFile({\n                path: options.path,\n                directory: (_a = options.directory) !== null && _a !== void 0 ? _a : undefined,\n                recursive: (_b = options.recursive) !== null && _b !== void 0 ? _b : false,\n                data: blob,\n            });\n            return { path: result.uri, blob };\n        };\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding && !(data instanceof Blob)) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data instanceof Blob ? data.size : data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content instanceof Blob) {\n                throw Error('The occupied entry contains a Blob object which cannot be appended to.');\n            }\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","FilesystemWeb","constructor","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","downloadFile","async","options","_a","_b","requestInit","webFetchExtra","response","fetch","url","blob","progress","body","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","value","read","status","notifyListeners","allChunks","Uint8Array","position","chunk","set","Blob","buffer","type","undefined","writeFile","directory","recursive","data","uri","initDb","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","indexOf","then","conn","req","transaction","objectStore","dbIndexRequest","indexName","index","getPath","uriPath","cleanedUriPath","replace","fsPath","clear","readFile","entry","Error","content","encoding","doRecursive","occupiedEntry","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","appendFile","btoa","atob","deleteFile","IDBKeyRange","only","depth","match","parentEntry","rmdir","fullPath","readDirResult","readdir","files","entryPath","name","stat","entries","all","map","e","subEntry","substring","getUri","rename","_copy","copy","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","parent","children","pathsA","pathsB","every","isPathParent","toObj","toPathComponents","fromObj","updateTime","file","UTF8","writeResult","contents","filename","str","err","_debug"],"sourceRoot":""}